// Setup
// =============================================================================
// Paths
var path    = require('path'),
    libPath = path.resolve('./gulp/lib') + '/';

// Packages
var gulp        = require('gulp'),
    plugins     = require('gulp-load-plugins')(),
    taskListing = require('gulp-task-listing');

// Helpers
var createTasks = require('./gulp/util/create-tasks');

// Store 'require' with root context for simplified "from project root" loading
plugins.require = require;

// Tasks & Run Sequence
// =============================================================================
/*
    Task Object
    - Top-level keys used as main task names
    - .config: object with sub-task configuration data
    - .order : array of subtask names to create and add to main task run
               sequence with arrays run in parallel
    - .tasks : array of subtask names to create but not add to run sequence
    - .watch : boolean that determines if main watch task is added to run sequence

    Generated Tasks
    - Gulp main task names match top-level task object keys
      Ex: gulpTaskObj.maintask creates task named 'maintask'
    - Gulp subtask names use 'maintask-subtask' convention
      Ex: maintask.config.subtask creates task named 'maintask-subtask'
    - Watch tasks generated by setting 'watch' prop with path in subtask config
      Ex: subtask.watch = [path1, path2, ...]
    - Generated tasks can be used as subtasks in other tasks

    Config Files / Objects
    - Lib file defaults to subtask name if 'lib' prop is omitted
      Ex: config.copy {...} will uses 'copy.js' lib
    - Lib file can be specified by adding the 'lib' prop to a subtask.
      Ex: config.mytask { lib: 'copy' } will use 'copy.js' lib
    - View lib file for config requirements and options
    - Add clean paths to main task or subtasks by setting the 'clean' prop
    - Add watch paths to subtasks by settings the 'watch' prop
*/
var gulpTaskObj = {
    // Demo
    // -------------------------------------------------------------------------
    'demo': {
        config: require('./gulp/task-demo'),
        watch : false,
        order : [
            [
                'copy-static',
                'html-hbs',
                'images',
                'js-main',
                'js-vendor',
                'css',
                'less',
                'postcss',
                'sass',
                'sassdoc',
                'stylus'
            ]
        ],
        tasks: [
            'browsersync',
            'clean'
        ]
    },
    dev: {
        order: [
            'demo',
            [
                'demo-watch',
                'demo-browsersync'
            ]
        ]
    },
    // Utility
    // -------------------------------------------------------------------------
    bump: {
        config: require('./gulp/task-bump'),
        order: [
            'patch'
        ],
        tasks: [
            'beta',
            'major',
            'minor'
        ]
    },
    clean: {
        order: [
            'demo-clean'
        ]
    }
};

// Create tasks
createTasks(gulpTaskObj, libPath, plugins);

// Additional Tasks
// =============================================================================
// Help: Display all gulp tasks
gulp.task('tasks', taskListing);

// Default: Display main gulp tasks
gulp.task('default', function() {
    console.log('============================================================');
    console.log('Gulp Boilerplate');
    console.log('============================================================');
    console.log('gulp bump        = Bump patch version');
    console.log('gulp bump-[type] = Bump [beta|major|minor|patch] version');
    console.log('gulp clean       = Delete build code');
    console.log('gulp demo        = Build demo');
    console.log('gulp dev         = Build and serve demo + watch files');
    console.log('gulp tasks       = List available gulp tasks');
    console.log('------------------------------------------------------------');
});
